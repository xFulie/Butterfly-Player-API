class FluttershyMain {
	settingsUser = {
		colorPlayer: "#fff",
		colorPlayerText: "#000",
		link_css_player: '//floagg.info/package/beta-stylesheet@v0.3-fluttershy',
	}
	playerTitle = ''
	playerSubTitle = ''
	intro_skipping = null
	Kernel = null
	vControls = true
	fontSizeSubtitle = 18


	htmlQuality= null
	htmlAudio= null
	htmlSubtitle= null
	htmlPlaybackRate= null
	htmlQualityButtons= null
	htmlAudioButtons= null
	htmlSubtitleButtons= null
	htmlPlaybackRateButtons= null


	init(CssSelectorElement, SettingsObject) {
		this.kernel = new blueberryManager(CssSelectorElement)

		this.userSet = SettingsObject

		if(this.userSet.thumbnail !== undefined) {
			this.kernel.currentThumbnail = this.userSet.thumbnail
		}

		if(this.userSet.extension !== undefined) {
			this.kernel.arrayExtension = this.userSet.extension
		}

		if(this.userSet.quality !== undefined) {
			this.kernel.arrayQuality = this.userSet.quality

			if(this.userSet.defaultQuality !== undefined) {
				this.kernel.currentQuality = this.userSet.defaultQuality
			}
		}

		if(this.userSet.subtitle !== undefined) {
			this.kernel.arraySubtitle = this.userSet.subtitle
		}

		if(this.userSet.src !== undefined) {
			this.videoSrc = this.userSet.src
			this.kernel.currentSrc = this.userSet.src
					.replace(/\$\(\{audio\}\)/g, this.videoSrc)
					.replace(/\$\(\{quality\}\)/g, this.kernel.currentQuality)
					.replace(/\$\(\{extension\}\)/g, this.kernel.currentExtension)
		}

		if(this.userSet.audio !== undefined) {
			this.kernel.arrayAudio = this.userSet.audio

			if(!this.videoSrc) {
				this.videoSrc = this.kernel.arrayAudio[0].src
				let reg = this.userSet.audio[0].src
					.replace(/\$\(\{audio\}\)/g, this.userSet.audio[0].src)
					.replace(/\$\(\{quality\}\)/g, this.kernel.currentQuality)
					.replace(/\$\(\{extension\}\)/g, this.kernel.currentExtension)

				this.kernel.currentSrc = reg
			}
		}

		if(this.userSet.height && this.userSet.width) {
			this.kernel.gSize = [this.userSet.width, this.userSet.height]
		}

		if(this.userSet.title) {
			this.playerTitle = this.userSet.title
		}

		if(this.userSet.sub_title) {
			this.playerSubTitle = this.userSet.sub_title
		}

		if(this.userSet.controls !== undefined) {
			this.vControls = this.userSet.controls
		}


		if(this.userSet.volume !== undefined) {
			this.kernel.volume = this.userSet.volume
		}

		///console.log(this.kernel)
	}
	load() {
		this.kernel.load_manager()

		if(this.vControls) {
			if(this.kernel.arraySubtitle.length > 0)
				this.#init_subtitle()
			if(this.kernel.arrayQuality.length > 0)
				this.#init_quality()
			if(this.kernel.arrayAudio.length > 0)
				this.#init_audio()
			this.#init_playbackRate()
			this.global_controls()

			this.contentVolumeBar = this.kernel.ConstructorElement.querySelector('.volumechange-bar')
			this.volumeSize = this.kernel.ConstructorElement.querySelector('.volumechange-bar')

			this.evement_controls()
		}

		this.kernel.htmlTracks = this.allSubtitleList_Track
	}

	load_evement_settings() {
		let allPlaybackrate = this.kernel.ConstructorElement.querySelectorAll('ul#playbackrate li')
		allPlaybackrate.forEach((e) => {
			this.kernel.addEvent(e, 'click', () => {
				let elkement = e.querySelector('span')
				
				this.kernel.currentPlaybackrate = elkement.dataset.value

				this.kernel.ConstructorElement.querySelector('#playbackrate-current').textContent = elkement.textContent
				
				if(this.kernel.ConstructorElement.querySelectorAll('.option-player-video-translate.focus').length > 0) {
					this.kernel.ConstructorElement.querySelector('.option-player-video-translate').style.transform = 'translateX(0px)'
					this.kernel.ConstructorElement.querySelector('.option-player-video-translate').classList.remove('focus')

					let allB = this.kernel.ConstructorElement.querySelectorAll('.option-player-video-content.right .setting-info')
					allB.forEach((e) => {
						e.style.display = "none"
					})
				}
				this.kicked_settings()
			})
		})

		let allQuality = this.kernel.ConstructorElement.querySelectorAll('ul#quality li')
		allQuality.forEach((e) => {
			this.kernel.addEvent(e, 'click', () => {
				let elkement = e.querySelector('span')

				this.kernel.ConstructorElement.querySelector('#quality-current').textContent = elkement.dataset.qualityId
				this.kernel.currentQuality = elkement.dataset.qualityId
				
				this.kernel.currentSrc = this.videoSrc
					.replace(/\$\(\{audio\}\)/g, this.videoSrc)
					.replace(/\$\(\{quality\}\)/g, this.kernel.currentQuality)
					.replace(/\$\(\{extension\}\)/g, this.kernel.currentExtension)

				this.kernel.videoReload()
				
				this.kicked_settings()
			})
		})

		let allaudio = this.kernel.ConstructorElement.querySelectorAll('ul#audio li')
		allaudio.forEach((e) => {
			this.kernel.addEvent(e, 'click', () => {
				let elkement = e.querySelector('span')
				
				this.videoSrc = elkement.dataset.audioInit
				this.kernel.currentSrc = this.videoSrc
					.replace(/\$\(\{audio\}\)/g, this.videoSrc)
					.replace(/\$\(\{quality\}\)/g, this.kernel.currentQuality)
					.replace(/\$\(\{extension\}\)/g, this.kernel.currentExtension)
				
				this.kernel.videoReload()

				this.kernel.ConstructorElement.querySelector('#audio-current').textContent = elkement.textContent
				this.kernel.currentAudio = elkement.dataset.audioId

				this.kicked_settings()
			})
		})


		let allLang = this.kernel.ConstructorElement.querySelectorAll('ul#subtitle li.button')
		let con = 0
		allLang.forEach((e) => {
			if(con < (allLang.length-1)) {
				let id = e.querySelector('span').dataset.id
				if(!this.kernel.videoNode.textTracks[id]) 
					return
				this.kernel.removeEvent(this.kernel.videoNode.textTracks[id], 'cuechange', () => {})
				this.kernel.videoNode.textTracks[id].removeEventListener('cuechange', null)
				this.kernel.ConstructorElement.querySelector('.trackText').style.display = "none"
				this.kernel.videoNode.textTracks[id].mode = 'hidden'
				this.kernel.videoNode.textTracks[id].mode = 'disabled'
			}

			this.kernel.addEvent(e, 'click', () => {
				this.kernel.ConstructorElement.classList.remove('settings')
				let elkement = e.querySelector('span')

				if(elkement.dataset.id == 'off') {
					this.kernel.ConstructorElement.querySelector('#lang-current').textContent = "Off"
					this.kernel.currentSubtitle = "Off"

					let aco = 0;
					allLang.forEach((ee) => {
						if(aco < (allLang.length-1)) {
							let idaa = ee.querySelector('span').dataset.id
							
							this.kernel.videoNode.textTracks[idaa].removeEventListener('cuechange', null)
							this.kernel.ConstructorElement.querySelector('.trackText').style.display = "none"
							this.kernel.videoNode.textTracks[idaa].mode = 'disabled' 
						}
						aco++
					})
					return
				}

				this.kernel.currentTrack = this.kernel.videoNode.textTracks[elkement.dataset.id]
				this.kernel.currentTrack.mode = 'hidden'
				
				this.#init_event_subtitle()

				this.kernel.ConstructorElement.querySelector('#lang-current').textContent = elkement.dataset.name
				this.kernel.currentSubtitle = elkement.dataset.name
			})
			con++
		})
	}
	#init_event_subtitle() {
		this.kernel.removeEvent(this.kernel.currentTrack, 'cuechange', () => {})
		this.kernel.addEvent(this.kernel.currentTrack, 'cuechange', () => {
			let cues = this.kernel.currentTrack.activeCues;

			if(!cues[0]) {
				this.kernel.ConstructorElement.querySelector('.trackText').style.display = "none"
				return
			}

			let trackText = cues[0].text

			this.kernel.ConstructorElement.querySelector('.trackText').innerHTML = '<div><span>'+trackText.replace("\n", '</div></span><div><span>')+"</div></span>"
			this.kernel.ConstructorElement.querySelector('.trackText').style.display = "inline-block"
		})
	}

	#init_playbackRate() {
		this.htmlPlaybackRate = html("div", {class: "button-get-settings option-button playbackrate-changer", 'data-get': "playbackrate", 'data-name': "Vitesse de lecture"},
			html("span", {class: "current qulity-current"},
				html("span", {class: "title"}, "Vitesse de lecture"),
				html("span", {class: "generate-change", id: "playbackrate-current"}, "Normal")
			)
		)
		this.htmlPlaybackRateButtons = html("ul", {class: "setting-info", id: "playbackrate"})

		let playbackrateList = [0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8]
		let i = 0;
		let th = []
		playbackrateList.forEach((e) => {
			let name = e
			if(e === 1.0)
				name = 'Normal'
			else
				name = e+'x'
			this.htmlPlaybackRateButtons.appendChild(html("li", {class: "button button-hover"}, html("span", {class: "button-change button-change-playbackrate", 'data-value': e, 'data-id': i}, name)))
			i++
		})
	}
	#init_quality() {

		if(this.kernel.currentQuality === '') {
			this.kernel.currentQuality = this.kernel.arrayQuality[0]
		}

		this.htmlQuality = html("div", {class: "button-get-settings option-button quality-changer", 'data-get': "quality", 'data-name': "Qualité vidéo", 'data-current': this.kernel.currentQuality},
			html("span", {class: "current lang-current"},
				html("span", {class: "title"}, "Qualité"),
				html("span", {class: "generate-change", id: "quality-current"}, this.kernel.currentQuality)
			)
		)
		this.htmlQualityButtons = html("ul", {class: "setting-info", id: "quality"})
		this.kernel.arrayQuality.forEach((e) => {
			this.htmlQualityButtons.appendChild(html("li", {class: "button button-hover"},
				html("span", {class: "button-change button-change-quality", 'data-quality-id': e}, e)
			))
		})
	}
	#init_audio() {
		if(this.kernel.arrayAudio.length <= 0)
			return;

		if(this.currentAudio === '') {
			this.currentAudio = this.kernel.arrayAudio[0].name
			if(this.onChangeAudio)
				this.onChangeAudio(this.kernel.arrayAudio[0].src)
			else
				this.kernel.currentSrc = this.kernel.arrayAudio[0].src
		}

		this.htmlAudio = html("div", {class: "button-get-settings option-button quality-changer", 'data-get': "audio", 'data-name': "Audio de la vidéo", 'data-current': this.kernel.currentAudio},
			html("span", {class: "current audio-current"},
				html("span", {class: "title"}, "Audio"),
				html("span", {class: "generate-change", id: "audio-current"}, this.kernel.currentAudio)
			)
		)

		this.htmlAudioButtons = html("ul", {class: "setting-info", id: "audio"})
		this.kernel.arrayAudio.forEach((e) => {
			this.htmlAudioButtons.appendChild(html("li", {class: "button button-hover"}, html("span", {class: "button-change button-change-audio", 'data-audio-init': e.src, 'data-audio-id': e.id}, e.name)))
		})
	}
	#init_subtitle() {
		this.kernel.currentSubtitle = "Off"
		this.allSubtitleList_Track = ""
		this.htmlSubtitle = html("div", {class: "button-get-settings option-button lang-changer", 'data-get': "subtitle", 'data-name': "Sous-titre", 'data-current': this.kernel.currentAudio},
			html("span", {class: "current lang-current"},
				html("span", {class: "title"}, "Sous-titre"),
				html("span", {class: "generate-change", id: "lang-current"}, "Off")
			)
		)
		this.htmlSubtitleButtons = html("ul", {class: "setting-info", id: "subtitle"})

		//this.htmlSubtitleButtons += `<li class="button-change-font"><span class="icon-button button-hover" id="less-font-st">${iconLess}</span><span id="font-st">${this.fontSizeSubtitle}</span><span class="icon-button button-hover" id="plus-font-st">${iconPlus}</span></li>`
		//this.htmlSubtitleButtons += `<li class="button button-hover"><span class="button-change button-change-lang" data-id="off">Off</span></li>`
		//this.htmlSubtitleButtons += '</ul>'

		let i = 0;
		this.kernel.arraySubtitle.forEach((e) => {
			this.htmlSubtitleButtons.appendChild(html("li", {class: "button button-hover"},
				html("span", {class: "button-change button-change-lang", 'data-id': i, 'data-name': e.name}, e.name)
			))
			i++
		})
		this.htmlSubtitleButtons.appendChild(html("li", {class: "button button-hover"},
			html("span", {class: "button-change button-change-lang", 'data-id': 'Off', 'data-name': 'Off'}, 'Off')
		))
	}

	updateBar(x, vol, setVol = true) {
		var percentage;
		//if only volume have specificed
		//then direct update volume
		if (vol !== undefined) {
			percentage = vol * 100;
		} else {
			var rect = this.contentVolumeBar.getBoundingClientRect();

			var position = x - rect.left;
			percentage = 100 * position / this.contentVolumeBar.clientWidth;
		}

		if (percentage > 100) {
		    percentage = 100;
		}
		if (percentage < 0) {
			percentage = 0;
		}

		if(!this.contentVolumeBar)
			return;

		//update volume bar and video volume
		if(setVol)
			this.kernel.volume = percentage / 100;

		this.contentVolumeBar.querySelector('span').style.width = percentage+"%"
	}
}

function intToTime(int) {
	var hours = Math.floor(int / 3600)
	var minutes = Math.floor((int % 3600) / 60)
	var seconds = Math.floor(int % 60)

	if(hours < 10) { hours = "0"+hours }
	if(minutes < 10) { minutes = "0"+minutes }
	if(seconds < 10) { seconds = "0"+seconds }

	let textToTime = minutes + ':' + seconds

	if(hours > 0) {
		textToTime = hours + ":" + textToTime
	}

	return textToTime
}