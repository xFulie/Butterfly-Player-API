/*
 * Blueberry - ***Evenement Manager***
 *
 * - blueberry.min
 * new blueberryMain()
 */
class blueberryMain {
	#replaceConstructor = ''

	#audio = {
		array: [],
		current: ''
	}

	#quality = {
		array: [],
		current: ''
	}

	#subtitle = {
		array: [],
		current: ''
	}

	#extension = {
		array: [],
		current: ''
	}

	videoElement = {
		node: null,
		nodeThumbnail: null,
		src: '',
		autoplay: false,
		muted: false,
		height: 720,
		width: 1280,
		volume: 0.6,

		currentTrack: null,
		currentTime: 0,

		src_thumbnail: ''
	}

	/*
	 * Basic Déclaration
	 *
	 *
	 */
	// Setter
	set ConstructorElement(value) { this.#replaceConstructor = value }

	// Getter
	get ConstructorElement() { return this.#replaceConstructor }

	/*
	 * Optionnel fonctionnalité
	 *
	 *
	 */
	// Setter
	set arrayQuality(value) { this.#quality.array = value }
	set arraySubtitle(value) { this.#subtitle.array = value }
	set arrayAudio(value) { this.#audio.array = value }
	set arrayExtension(value) {
		this.#extension.array = value;

		this.currentExtension = this.#is_extension();
	}

	set height(value) { this.videoElement.height = value }
	set width(value) { this.videoElement.width = value }
	set gSize(value) {
		if(!value[0] || !value[1]) {
			console.error('Un problèmes est survenue lors de la décompressions des donner Height & Width.')
		}

		this.videoElement.width = value[0]
		this.videoElement.height = value[1]

		if(!this.#replaceConstructor) {
			console.error('Imposible d\'appliquer une modification de taille sur un noeud inexistant.')
		}
		this.#replaceConstructor.style.width = this.videoElement.width
		this.#replaceConstructor.style.height = this.videoElement.height
	}

	set currentQuality(value) { this.#quality.current = value }
	set currentAudio(value) { this.#audio.current = value }
	set currentExtension(value) { this.#extension.current = value }

	// Getter
	get arrayQuality() { return this.#quality.array }
	get arraySubtitle() { return this.#subtitle.array }
	get arrayAudio() { return this.#audio.array }
	get arrayExtension() { return this.#extension.array }

	get currentExtension() { return this.#extension.current }
	get currentQuality() { return this.#quality.current }

	/*
	 * Video & Thumbnail Déclaration
	 *
	 *
	 */
	// Setter
	set currentTrack(value) { this.videoElement.currentTrack = value }
	set videoNode(value) { this.videoElement.node = value }

	set currentSrc(value) {
		this.videoElement.src = value
	}
	set currentThumbnail(value) { this.videoElement.src_thumbnail = value }

	set currentTime(value) {
		this.videoElement.currentTime = value
	}
	set upateTime(value) {
		this.videoElement.node.currentTime = value
	}

	set volume(value) {
		this.videoNode.volume = value
		this.videoElement.volume = value
	}

	set currentPlaybackrate(value) { this.videoElement.node.playbackRate = value }

	// Getter
	get currentTrack() { return this.videoElement.currentTrack }

	get videoNode() { return this.videoElement.node }

	get currentPlaybackrate() { return this.videoElement.node.playbackRate }

	get currentSrc() { return this.videoElement.src }
	get currentThumbnail() { return this.videoElement.src_thumbnail }

	// Getter VideoElementNode
	get duration() { return this.videoNode.duration }
	get currentTime() { return this.videoElement.currentTime }
	get volume() { return this.videoNode.volume }

	constructor(CssSelectorElement) {
		this.ConstructorElement = document.querySelector(CssSelectorElement)
	}

	#is(string, not_string) {
		let extFile = this.#extension.array

		if(extFile.find((element) => string == element))
			return string;

		return string[0];
	}

	#is_extension() {
	  if ((navigator.userAgent.indexOf("Opera") || navigator.userAgent.indexOf('OPR')) != -1) {
	    return this.#is(this.#extension.array, 'mp4')
	  } else if (navigator.userAgent.indexOf("Edg") != -1) {
	    return this.#is(this.#extension.array, 'mp4')
	  } else if (navigator.userAgent.indexOf("Chrome") != -1) {
	    return this.#is(this.#extension.array, 'webm')
	  } else if (navigator.userAgent.indexOf("Safari") != -1) {
	    return this.#is(this.#extension.array, 'mp4')
	  } else if (navigator.userAgent.indexOf("Firefox") != -1) {
	    return this.#is(this.#extension.array, 'webm')
	  } else if ((navigator.userAgent.indexOf("MSIE") != -1) || (!!document.documentMode == true)) //IF IE > 10
	  {
	    return this.#is(this.#extension.array, 'mp4')
	  } else {
	    return null;
	  }
	}
}

/*
function strRandom(o) {
  var a = 10,
      b = 'abcdefghijklmnopqrstuvwxyz',
      c = '',
      d = 0,
      e = ''+b;
  if (o) {
    if (o.startsWithLowerCase) {
      c = b[Math.floor(Math.random() * b.length)];
      d = 1;
    }
    if (o.length) {
      a = o.length;
    }
    if (o.includeUpperCase) {
      e += b.toUpperCase();
    }
    if (o.includeNumbers) {
      e += '1234567890';
    }
  }
  for (; d < a; d++) {
    c += e[Math.floor(Math.random() * e.length)];
  }
  return c;
} */