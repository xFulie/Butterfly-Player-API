class Fluttershy_API {
	settingsUser = {
		colorPlayer: "#fff",
		colorPlayerText: "#000",
		link_css_player: '//floagg.info/package/beta-stylesheet@v0.3-fluttershy',
	}
	playerTitle = ''
	playerSubTitle = ''
	intro_skipping = null
	Kernel = null
	vControls = true
	fontSizeSubtitle = 18


	htmlQuality = ''
	htmlAudio = ''
	htmlSubtitle = ''
	htmlPlaybackRate = ''
	htmlQualityButtons = ''
	htmlAudioButtons = ''
	htmlSubtitleButtons = ''
	htmlPlaybackRateButtons = ''


	create(CssSelectorElement, SettingsObject) {
		this.set(CssSelectorElement, SettingsObject)
	}
	set(CssSelectorElement, SettingsObject) {
		this.Kernel = new blueberryManager(CssSelectorElement)

		this.userSet = SettingsObject

		if(this.userSet.thumbnail !== undefined) {
			this.Kernel.currentThumbnail = this.userSet.thumbnail
		}

		if(this.userSet.extension !== undefined) {
			this.Kernel.arrayExtension = this.userSet.extension
		}

		if(this.userSet.quality !== undefined) {
			this.Kernel.arrayQuality = this.userSet.quality

			if(this.userSet.defaultQuality !== undefined) {
				this.Kernel.currentQuality = this.userSet.defaultQuality
			}
		}

		if(this.userSet.subtitle !== undefined) {
			this.Kernel.arraySubtitle = this.userSet.subtitle
		}

		if(this.userSet.src !== undefined) {
			this.videoSrc = this.userSet.src
			this.Kernel.currentSrc = this.userSet.src
					.replace(/\$\(\{audio\}\)/g, this.videoSrc)
					.replace(/\$\(\{quality\}\)/g, this.Kernel.currentQuality)
					.replace(/\$\(\{extension\}\)/g, this.Kernel.currentExtension)
		}

		if(this.userSet.audio !== undefined) {
			this.Kernel.arrayAudio = this.userSet.audio

			if(!this.videoSrc) {
				this.videoSrc = this.Kernel.arrayAudio[0].src
				let reg = this.userSet.audio[0].src
					.replace(/\$\(\{audio\}\)/g, this.userSet.audio[0].src)
					.replace(/\$\(\{quality\}\)/g, this.Kernel.currentQuality)
					.replace(/\$\(\{extension\}\)/g, this.Kernel.currentExtension)

				this.Kernel.currentSrc = reg
			}
		}

		if(this.userSet.height && this.userSet.width) {
			this.Kernel.gSize = [this.userSet.width, this.userSet.height]
		}

		if(this.userSet.title) {
			this.playerTitle = this.userSet.title
		}

		if(this.userSet.sub_title) {
			this.playerSubTitle = this.userSet.sub_title
		}

		if(this.userSet.controls !== undefined) {
			this.vControls = this.userSet.controls
		}



		console.log(this.Kernel)
	}
	load() {
		this.Kernel.load_manager()

		if(this.vControls) {
			if(this.Kernel.arraySubtitle.length > 0)
				this.#init_subtitle()
			if(this.Kernel.arrayQuality.length > 0)
				this.#init_quality()
			if(this.Kernel.arrayAudio.length > 0)
				this.#init_audio()
			this.#init_playbackRate()
			this.global_controls()

			this.contentVolumeBar = this.Kernel.ConstructorElement.querySelector('.volumechange-bar')
			this.volumeSize = this.Kernel.ConstructorElement.querySelector('.volumechange-bar')

			this.evement_controls()
		}

		this.Kernel.htmlTracks = this.allSubtitleList_Track
	}

	evement_controls() {
		let infoBull = this.Kernel.ConstructorElement.querySelector('.infobull-progressbar')
		let progressBarContenaire = this.Kernel.ConstructorElement.querySelector('.progress-bar')
		let progressBarReaded = progressBarContenaire.querySelector('.readed')

		this.Kernel.onLoad = () => {
			if(this.userSet.volume !== undefined) {
				//this.Kernel.volume = this.userSet.volume;
				this.updateBar(null, this.userSet.volume)
			}
			this.updateBar(null, this.Kernel.volume, false)

			if(this.Kernel.volume > 0.0) {
				this.Kernel.ConstructorElement.querySelector('#player_button_muted').innerHTML = iconUnMute
			} else {
				this.Kernel.ConstructorElement.querySelector('#player_button_muted').innerHTML = iconMute
			}
		}

		this.Kernel.onVolumechange = () => {
			if(this.Kernel.volume > 0.0) {
				this.Kernel.ConstructorElement.querySelector('#player_button_muted').innerHTML = iconUnMute
			} else {
				this.Kernel.ConstructorElement.querySelector('#player_button_muted').innerHTML = iconMute
			}
		}

		this.Kernel.onDurationchange = () => {
			this.Kernel.ConstructorElement.querySelector('#videoDuration').textContent = intToTime(this.Kernel.duration)
		}

		this.Kernel.onTimeupdate = () => {
			this.currentTime = this.Kernel.currentTime
			this.Kernel.ConstructorElement.querySelector('#videoCurrentTime').textContent = intToTime(this.Kernel.currentTime)

			let videoCurrentTime = (this.Kernel.currentTime / this.Kernel.duration) * 100;
			progressBarReaded.style.width = videoCurrentTime+"%"
		}

		this.Kernel.onPlay = () => {
			this.Kernel.ConstructorElement.classList.add('video-is-play')
			this.Kernel.ConstructorElement.classList.remove('video-is-pause')
			this.Kernel.ConstructorElement.classList.remove('video-ended')
			this.Kernel.ConstructorElement.classList.remove('video-is-error')

			if(!this.Kernel.ConstructorElement.classList.contains('video-playing'))
				this.Kernel.ConstructorElement.classList.add('video-playing')

			this.Kernel.ConstructorElement.querySelector('#player_button_pause').innerHTML = iconPause

			//this.updateBar(null, Kernel.vVolume);
		}
		this.Kernel.onPause = () => {
			this.Kernel.ConstructorElement.classList.remove('video-is-play')
			this.Kernel.ConstructorElement.classList.add('video-is-pause')

			this.Kernel.ConstructorElement.querySelector('#player_button_pause').innerHTML = iconPlay
		}

		let intervalHide = null;
		function setIntervalMouseInPlayer(e, elem) {
			clearInterval(intervalHide);
			intervalHide = setInterval(() => {
				elem.classList.remove('mouse-in-player')
				e.visibilityControler = false

				clearInterval(intervalHide);
			}, 5000)
		}

		this.Kernel.addEvent(this.Kernel.ConstructorElement, 'mouseleave', () => {
			if(this.Kernel.ConstructorElement.classList.contains('player-error'))
				return;

			this.Kernel.ConstructorElement.classList.remove('mouse-in-player')
			this.Kernel.visibilityControler = false

			clearInterval(intervalHide);
		})
		this.Kernel.addEvent(this.Kernel.ConstructorElement, 'mousemove', () => {
			if(this.Kernel.ConstructorElement.classList.contains('error'))
				return;

			this.Kernel.ConstructorElement.classList.add('mouse-in-player')
			this.Kernel.visibilityControler = true

			setIntervalMouseInPlayer(this, this.Kernel.ConstructorElement)
		})
		this.Kernel.addEvent(this.Kernel.ConstructorElement.querySelector('.butterfly-player-controleurs .bottom'), 'mouseenter', () => {
			clearInterval(intervalHide);
		})
		this.Kernel.addEvent(this.Kernel.ConstructorElement.querySelector('.butterfly-player-controleurs .bottom'), 'mouseleave', () => {
			setIntervalMouseInPlayer(this, this.Kernel.ConstructorElement)
		})



		this.Kernel.addEvent(progressBarContenaire, 'mouseenter', () => {
			progressBarContenaire.addEventListener('mousemove', (e) => {
				let progressWidth = progressBarContenaire.offsetWidth


				var rect = progressBarContenaire.getBoundingClientRect(); //todo: optimisation ?
				let x = e.clientX - rect.left;
				var time = (x/progressWidth) * this.Kernel.duration;

				infoBull.querySelector('.timecode').textContent = intToTime(time)

				if(this.Kernel.seek_file)
					infoBull.querySelector('video').currentTime = time

				infoBull.style.left = (x)+"px"
				infoBull.style.display = 'block'
			})
		})

		this.Kernel.addEvent(progressBarContenaire, 'mousedown', (e) => {
			let progressWidth = progressBarContenaire.offsetWidth


			var rect = progressBarContenaire.getBoundingClientRect(); //todo: optimisation ?
			let x = e.clientX - rect.left;
			var time = (x/progressWidth) * this.Kernel.duration;

			this.Kernel.currentTime = time
		})

		this.Kernel.addEvent(progressBarContenaire, 'mouseleave', () => {
			infoBull.style.display = 'none'
		})


		this.Kernel.addEvent('.volumechange-bar', 'mousedown', (ev) => {
			this.volumeDrag = true;
			this.updateBar(ev.clientX);
		}, true);

		this.Kernel.addEvent(document, 'mousemove', (ev) => {
			if(this.volumeDrag){
				this.updateBar(ev.clientX);
			}
		});
		this.Kernel.addEvent(document, 'mouseup', (ev) => {
			this.volumeDrag = false;
		});


		this.Kernel.addEvent(this.Kernel.ConstructorElement, 'click', (e) => {
			switch(e.target.nodeName) {
				case 'h1':
				case 'A':
				case 'BUTTON':
				case 'SPAN':
					return
					break;
			}
			if(this.Kernel.ConstructorElement.classList.contains('settings')) {
					
				let r = this.kicked_settings()
				if(r)
					return;

				this.Kernel.ConstructorElement.classList.remove('settings')
			}
			//console.log(this.Kernel.videoNode.parentNode)
			this.Kernel.togglePlay()
		})

		this.Kernel.addEvent('#player_button_pause', 'click', (e) => {
			this.Kernel.togglePlay()
		}, true)

		this.Kernel.addEvent('#player_button_muted', 'click', (e) => {
			this.Kernel.toggleMute()
		}, true)

		this.Kernel.addEvent('#player_button_fullscreen', 'click', (e) => {
			this.Kernel.toggleFullScreen()
		}, true)

		let allButtonSettoing = this.Kernel.ConstructorElement.querySelectorAll('.button-get-settings')
		this.Kernel.addEvent('#setting-video-icon', 'click', (e) => {
			if(this.Kernel.ConstructorElement.classList.contains('settings')) {
				this.Kernel.ConstructorElement.classList.remove('settings')
					
				this.kicked_settings()
				return
			}
			
			this.Kernel.ConstructorElement.classList.add('settings')

			allButtonSettoing.forEach((element) => {
				this.Kernel.addEvent(element, 'click', (e) => {
					this.Kernel.ConstructorElement.querySelector('.option-player-video-translate').classList.add('focus')

					let element_changer = element.parentNode.parentNode
					let classUl = element.dataset.get

					if(!element_changer.querySelector(`.option-player-video-content.right #`+classUl))
						return

					element_changer.querySelector(`.option-player-video-content.right #`+classUl).style.display = "block"
					element_changer.querySelector('.option-player-video-content.right #menu-title').innerHTML = `<span>${element.dataset.name}</span><span class="generate-change">${element.dataset.current}</span>`
					element_changer.style.transform = 'translateX(-'+element_changer.offsetWidth+'px)'
				})
			})
		}, true)

		this.load_evement_settings()
	}

	load_evement_settings() {
		let allPlaybackrate = this.Kernel.ConstructorElement.querySelectorAll('ul#playbackrate li')
		allPlaybackrate.forEach((e) => {
			this.Kernel.addEvent(e, 'click', () => {
				let elkement = e.querySelector('span')
				
				this.Kernel.currentPlaybackrate = elkement.dataset.value

				this.Kernel.ConstructorElement.querySelector('#playbackrate-current').textContent = elkement.textContent
				
				if(this.Kernel.ConstructorElement.querySelectorAll('.option-player-video-translate.focus').length > 0) {
					this.Kernel.ConstructorElement.querySelector('.option-player-video-translate').style.transform = 'translateX(0px)'
					this.Kernel.ConstructorElement.querySelector('.option-player-video-translate').classList.remove('focus')

					let allB = this.Kernel.ConstructorElement.querySelectorAll('.option-player-video-content.right .setting-info')
					allB.forEach((e) => {
						e.style.display = "none"
					})
				}
				this.kicked_settings()
			})
		})

		let allQuality = this.Kernel.ConstructorElement.querySelectorAll('ul#quality li')
		allQuality.forEach((e) => {
			this.Kernel.addEvent(e, 'click', () => {
				let elkement = e.querySelector('span')

				this.Kernel.ConstructorElement.querySelector('#quality-current').textContent = elkement.dataset.qualityId
				this.Kernel.currentQuality = elkement.dataset.qualityId
				
				this.Kernel.currentSrc = this.videoSrc
					.replace(/\$\(\{audio\}\)/g, this.videoSrc)
					.replace(/\$\(\{quality\}\)/g, this.Kernel.currentQuality)
					.replace(/\$\(\{extension\}\)/g, this.Kernel.currentExtension)

				this.Kernel.currentTime = this.currentTime
				
				this.kicked_settings()
			})
		})

		let allaudio = this.Kernel.ConstructorElement.querySelectorAll('ul#audio li')
		allaudio.forEach((e) => {
			this.Kernel.addEvent(e, 'click', () => {
				let elkement = e.querySelector('span')
				
				this.videoSrc = elkement.dataset.audioInit
				this.Kernel.currentSrc = this.videoSrc
					.replace(/\$\(\{audio\}\)/g, this.videoSrc)
					.replace(/\$\(\{quality\}\)/g, this.Kernel.currentQuality)
					.replace(/\$\(\{extension\}\)/g, this.Kernel.currentExtension)
				this.Kernel.currentTime = this.currentTime

				this.Kernel.ConstructorElement.querySelector('#audio-current').textContent = elkement.textContent
				this.Kernel.currentAudio = elkement.dataset.audioId

				this.kicked_settings()
			})
		})


		let allLang = this.Kernel.ConstructorElement.querySelectorAll('ul#subtitle li.button')
		let con = 0
		allLang.forEach((e) => {
			if(con < (allLang.length-1)) {
				let id = e.querySelector('span').dataset.id
				console.log(this.Kernel.videoNode.textTracks[id])
				if(!this.Kernel.videoNode.textTracks[id]) 
					return
				this.Kernel.removeEvent(this.Kernel.videoNode.textTracks[id], 'cuechange', () => {})
				this.Kernel.videoNode.textTracks[id].removeEventListener('cuechange', null)
				this.Kernel.ConstructorElement.querySelector('.trackText').style.display = "none"
				this.Kernel.videoNode.textTracks[id].mode = 'hidden'
				this.Kernel.videoNode.textTracks[id].mode = 'disabled'
			}

			this.Kernel.addEvent(e, 'click', () => {
				this.Kernel.ConstructorElement.classList.remove('settings')
				let elkement = e.querySelector('span')

				if(elkement.dataset.id == 'off') {
					this.Kernel.ConstructorElement.querySelector('#lang-current').textContent = "Off"
					this.Kernel.currentSubtitle = "Off"

					let aco = 0;
					allLang.forEach((ee) => {
						if(aco < (allLang.length-1)) {
							let idaa = ee.querySelector('span').dataset.id
							
							this.Kernel.videoNode.textTracks[idaa].removeEventListener('cuechange', null)
							this.Kernel.ConstructorElement.querySelector('.trackText').style.display = "none"
							this.Kernel.videoNode.textTracks[idaa].mode = 'disabled' 
						}
						aco++
					})
					return
				}

				this.Kernel.currentTrack = this.Kernel.videoNode.textTracks[elkement.dataset.id]
				this.Kernel.currentTrack.mode = 'hidden'
				
				this.#init_event_subtitle()

				this.Kernel.ConstructorElement.querySelector('#lang-current').textContent = elkement.dataset.name
				this.Kernel.currentSubtitle = elkement.dataset.name
			})
			con++
		})
	}

	#init_event_subtitle() {
		this.Kernel.removeEvent(this.Kernel.currentTrack, 'cuechange', () => {})
		this.Kernel.addEvent(this.Kernel.currentTrack, 'cuechange', () => {
			let cues = this.Kernel.currentTrack.activeCues;

			if(!cues[0]) {
				this.Kernel.ConstructorElement.querySelector('.trackText').style.display = "none"
				return
			}

			let trackText = cues[0].text

			this.Kernel.ConstructorElement.querySelector('.trackText').innerHTML = '<div><span>'+trackText.replace("\n", '</div></span><div><span>')+"</div></span>"
			this.Kernel.ConstructorElement.querySelector('.trackText').style.display = "inline-block"
		})
	}

	kicked_settings() {
		let allButtonSettoing = this.Kernel.ConstructorElement.querySelectorAll('.button-get-settings')
		let allB = this.Kernel.ConstructorElement.querySelectorAll('.option-player-video-content.right .setting-info')

		if(this.Kernel.ConstructorElement.querySelectorAll('.option-player-video-translate.focus').length > 0) {
			this.Kernel.ConstructorElement.querySelector('.option-player-video-translate').classList.remove('focus')
			this.Kernel.ConstructorElement.querySelector('.option-player-video-content.right #menu-title').innerHTML = ``
			this.Kernel.ConstructorElement.querySelector('.option-player-video-translate').style.transform = 'translateX(0px)'

			allB.forEach((e) => {
				e.style.display = "none"
			})

			return true;
		}

		this.Kernel.ConstructorElement.classList.remove('settings')	
		allButtonSettoing.forEach((element) => {
			this.Kernel.removeEvent(element, 'click', () => {})
		})

		return false;
	}

	global_controls() {
		document.querySelector('head').insertAdjacentHTML(
			'beforeend',
			`<link rel="stylesheet" type="text/css" href="${this.link_css_player}">`
		)
		document.querySelector('head').insertAdjacentHTML(
			'beforeend',
			`<style type="text/css">:root { --color-primary-player-butterfly: ${this.colorPlayer}; --color-text-player-butterfly: ${this.colorPlayerText}; }</style>`
		)

		this.Kernel.ConstructorElement.classList.add('butterfly-player-api', 'blueberry-player-kernel')

		this.playerHTML = `<div class="butterfly-player-controleurs">`

			this.playerHTML += `<div class="top">`
			if(this.playerSubTitle || this.playerTitle) {
				this.playerHTML += `<div class="info_file">`
					this.playerHTML += `<h2>${this.playerSubTitle}</h2>`
					this.playerHTML += `<h1 id="filename">${this.playerTitle}</h1>`
				this.playerHTML += `</div>`
			}
			this.playerHTML += `</div>`
			this.bar_controls()

		this.playerHTML += `</div>`
		this.playerHTML += `<div class="trackText" style="font-size: ${this.fontSizeSubtitle}px; line-height: ${this.fontSizeSubtitle+5}px;"></div>`

		this.option_video_content()


		this.Kernel.ConstructorElement.insertAdjacentHTML('afterbegin', this.playerHTML)
	}

	bar_controls() {
		this.playerHTML += `<div class="bottom">`
			this.playerHTML += `<div class="left">`
				this.playerHTML += `<ul>`
					this.playerHTML += `<li><button class="icon" id="player_button_pause">${iconPlay}</button></li>`
					this.playerHTML += `<li>`
						this.playerHTML += `<button class="icon" id="player_button_muted">${iconMute}</button>`
						this.playerHTML += `<span class="volumechange-bar"><span class="volumechange-bar-content"></span></span>`
					this.playerHTML += `</li>`
				this.playerHTML += `</ul>`
			this.playerHTML += `</div>`

			this.playerHTML += `<div class="center">`
				this.playerHTML += `<div class="progress-bar-contenaire-relative">`
					this.playerHTML += `<span class="infobull-progressbar">`
						if(this.seek_file) {
							this.playerHTML += `<video src="${this.seek_file}" muted width="200px"></video>`
						}
						this.playerHTML += `<span class="timecode">00:00</span>`
					this.playerHTML += `</span>`

					this.playerHTML += `<span class="wf-display progress-bar">`
						this.playerHTML += `<span class="buffered"></span>`
						this.playerHTML += `<span class="readed"></span>`
					this.playerHTML += `</span>`
				this.playerHTML += `</div>`
			this.playerHTML += `</div>`

			this.playerHTML += `<div class="right">`
				this.playerHTML += `<ul>`
					this.playerHTML += `<li>`
						this.playerHTML += `<div class="info-video">`
							this.playerHTML += `<span id="videoCurrentTime">00:00</span>`
							this.playerHTML += `<span>/</span>`
							this.playerHTML += `<span id="videoDuration">00:00</span>`
						this.playerHTML += `</div>`
					this.playerHTML += `</li>`
					this.playerHTML += `<li><button class="icon setting-button-icon" id="setting-video-icon">${iconSetting}</button></li>`
					this.playerHTML += `<li><button class="icon" id="player_button_fullscreen">${iconFullscreen}</button></li>`
				this.playerHTML += `</ul>`
			this.playerHTML += `</div>`
		
		this.playerHTML += `</div>`
	}

	option_video_content() {
		this.playerHTML += `<div class="option-video">`
			this.playerHTML += `<section class="option-player-video">`
				
				this.playerHTML += `<section class="option-player-video-translate">`

				this.playerHTML += `<section class="option-player-video-content left">`
					this.playerHTML += this.htmlQuality
					this.playerHTML += this.htmlAudio
					this.playerHTML += this.htmlSubtitle
					this.playerHTML += this.htmlPlaybackRate
					this.playerHTML += `<div class="button-get-settings option-button quality-changer" data-get="legal-notice" data-name="V${systeme_version} ${systeme_name} ${systeme_environement}">`
									+`<span class="current qulity-current">`
										+`<span class="title">Information sur le player</span>`
									+`</span>`
							+`</div>`
				this.playerHTML += `</section>`
				this.playerHTML += `<section class="option-player-video-content right">`
					this.playerHTML += `<section class="setting-head">`
						this.playerHTML += `<div class="button-icon">${iconLess}</div>`
						this.playerHTML += `<div id="menu-title">Menu</div>`
					this.playerHTML += `</section>`
					this.playerHTML += this.htmlQualityButtons
					this.playerHTML += this.htmlAudioButtons
					this.playerHTML += this.htmlSubtitleButtons
					this.playerHTML += this.htmlPlaybackRateButtons
					this.playerHTML += `<div class="setting-info" id="legal-notice">`
						this.playerHTML += `<p>Butterfly Player API</p>`
						this.playerHTML += `<p>Kernel V${kernel_version} ${kernel_name} ${kernel_environement}</p>`
						this.playerHTML += `<p>Player V${systeme_version} ${systeme_name} ${systeme_environement}</p>`
						this.playerHTML += `<p>By 'heart_butterfly' - Floagg Entreprise EI</p>`
					this.playerHTML += `</div>`
				this.playerHTML += `</section>`

				this.playerHTML += `</section>`

			this.playerHTML += `</section>`
		this.playerHTML += `</div>`
	}

	#init_playbackRate() {
		this.htmlPlaybackRate = `<div class="button-get-settings option-button playbackrate-changer" data-get="playbackrate" data-name="Vitesse de lecture">`
									+`<span class="current qulity-current">`
										+`<span class="title">Vitesse de lecture</span>`
										+`<span class="generate-change" id="playbackrate-current">Normal</span>`
									+`</span>`
							+`</div>`

		let playbackrateList = [0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8]
		let i = 0;
		this.htmlPlaybackRateButtons = '<ul class="setting-info" id="playbackrate">'
		playbackrateList.forEach((e) => {
			let name = e
			if(e === 1.0)
				name = 'Normal'
			else
				name = e+'x'
			this.htmlPlaybackRateButtons += `<li class="button button-hover"><span class="button-change button-change-playbackrate" data-id="${i}" data-value="${e}">${name}</span></li>`
			i++
		})
		this.htmlPlaybackRateButtons += '</ul>'
	}

	#init_quality() {

		if(this.Kernel.currentQuality === '') {
			this.Kernel.currentQuality = this.Kernel.arrayQuality[0]
		}

		this.htmlQuality = `<div class="button-get-settings option-button quality-changer" data-get="quality" data-name="Qualité vidéo" data-current="${this.Kernel.currentQuality}">`
									+`<span class="current qulity-current">`
										+`<span class="title">Qualité</span>`
										+`<span class="generate-change" id="quality-current">${this.Kernel.currentQuality}</span>`
									+`</span>`
							+`</div>`

		let i = 0;
		this.htmlQualityButtons = '<ul class="setting-info" id="quality">'
		this.Kernel.arrayQuality.forEach((e) => {
			this.htmlQualityButtons += `<li class="button-hover"><span class="button-change button-change-quality" data-quality-id="${e}">${e}</span></li>`
			i++
		})
		this.htmlQualityButtons += '</ul>'
	}

	#init_audio() {
		if(this.Kernel.arrayAudio.length <= 0)
			return;

		if(this.currentAudio === '') {
			this.currentAudio = this.Kernel.arrayAudio[0].name
			if(this.onChangeAudio)
				this.onChangeAudio(this.Kernel.arrayAudio[0].src)
			else
				this.Kernel.currentSrc = this.Kernel.arrayAudio[0].src
		}
		this.htmlAudio = `<div class="button-get-settings option-button quality-changer" data-get="audio" data-name="Audio de la vidéo" data-current="${this.Kernel.currentAudio}">`
									+`<span class="current audio-current">`
										+`<span class="title">Audio</span>`
										+`<span class="generate-change" id="audio-current">${this.Kernel.currentAudio}</span>`
									+`</span>`
							+`</div>`

		let i = 0;
		this.htmlAudioButtons = '<ul class="setting-info" id="audio">'
		this.Kernel.arrayAudio.forEach((e) => {
			this.htmlAudioButtons += `<li class="button-hover"><span class="button-change button-change-audio" data-audio-init="${e.src}" data-audio-id="${e.id}">${e.name}</span></li>`
			i++
		})
		this.htmlAudioButtons += '</ul>'
	}
	#init_subtitle() {
		this.Kernel.currentSubtitle = "Off"
		this.allSubtitleList_Track = ""
		this.htmlSubtitle = `<div class="button-get-settings option-button lang-changer" data-get="subtitle" data-name="Sous-titre" data-current="Off">`
									+`<span class="current lang-current">`
										+`<span class="title">Sous-titre</span>`
										+`<span class="generate-change" id="lang-current">Off</span>`
									+`</span>`
									+`</div>`

		let i = 0;
		this.htmlSubtitleButtons = '<ul class="setting-info" id="subtitle">'
		this.htmlSubtitleButtons += `<li class="button-change-font"><span class="icon-button button-hover" id="less-font-st">${iconLess}</span><span id="font-st">${this.fontSizeSubtitle}</span><span class="icon-button button-hover" id="plus-font-st">${iconPlus}</span></li>`
		this.Kernel.arraySubtitle.forEach((e) => {
			this.htmlSubtitleButtons += `<li class="button button-hover"><span class="button-change button-change-lang" data-id="${i}" data-name="${e.name}">${e.name}</span></li>`
			i++
		})
		this.htmlSubtitleButtons += `<li class="button button-hover"><span class="button-change button-change-lang" data-id="off">Off</span></li>`
		this.htmlSubtitleButtons += '</ul>'
	}

	updateBar(x, vol, setVol = true) {
		var percentage;
		//if only volume have specificed
		//then direct update volume
		if (vol !== undefined) {
			percentage = vol * 100;
		} else {
			var rect = this.contentVolumeBar.getBoundingClientRect();

			var position = x - rect.left;
			percentage = 100 * position / this.contentVolumeBar.clientWidth;
		}

		if (percentage > 100) {
		    percentage = 100;
		}
		if (percentage < 0) {
			percentage = 0;
		}

		if(!this.contentVolumeBar)
			return;

		//update volume bar and video volume
		if(setVol)
			this.Kernel.volume = percentage / 100;

		this.contentVolumeBar.querySelector('span').style.width = percentage+"%"
	}
}

function intToTime(int) {
	var hours = Math.floor(int / 3600)
	var minutes = Math.floor((int % 3600) / 60)
	var seconds = Math.floor(int % 60)

	if(hours < 10) { hours = "0"+hours }
	if(minutes < 10) { minutes = "0"+minutes }
	if(seconds < 10) { seconds = "0"+seconds }

	let textToTime = minutes + ':' + seconds

	if(hours > 0) {
		textToTime = hours + ":" + textToTime
	}

	return textToTime
}



const Player = new Fluttershy_API()