	constructor(contenaire) {}

	init() {
		if(!this.#gContenaire) {
			console.log("Error d'initilisation du lecteur.")
			return;
		}

		this.#gContenaire.classList.add('butterfly-player-api', 'blueberry-player-kernel')
		this.#gContenaire.style.height = this.#vSettings.height+"px"
		this.#gContenaire.style.width = this.#vSettings.width+"px"
		this.#init_quality();
		this.#init_subtitle();
		this.#init_audio();
		this.#init_controlers()
		this.#gContenaire.innerHTML += this.playerHTML

		let html_get = `<div class="blueberry-replay-video">`
			html_get += `<span class="thumbnail"><img src="${this.#vGlobal.srcThumbnail}"></span>`
			html_get += `<button onClick="Kernel.TogglePlay()">${iconReresh}<span id="button-replay-video">Replay vid√©o</span></button>`
		html_get += `</div>`

		html_get += `<div class="blueberry-logs">`
			html_get += `<span id="kernel-info">V${systeme_version} ${systeme_name} ${systeme_environement}</span>`
			html_get += `<span id="count-event">0 - event loaded</span>`
			html_get += `<span id="volume-info">Volume 0%</span>`
			html_get += `<span id="video-quality">Video 0p</span>`
			html_get += `<span id="video-audio">Lang</span>`
			html_get += `<span id="video-subtitle">Subtitle Off</span>`
			html_get += `<span id="video-statut">Statut </span>`
			html_get += `<span id="video-currentTime">Current Time 0</span>`
			html_get += `<div class="timerange">`
				html_get += `<span>TimeRange</span>`
				html_get += `<span id="bar-timerange"></span>`
			html_get += `</div>`
		html_get += `</div>`

		html_get += `<div class="trackText" style="font-size: ${this.#vGlobal.fontSizeSubtitle}px; line-height: ${this.#vGlobal.fontSizeSubtitle+5}px;"></div>`

		this.#gContenaire.innerHTML += html_get // += `<span id="count-event">0</span>`

		this.#init_video();

		this.#init_evenement();
	}

	#init_event_subtitle() {
		this.#vGlobal.currentTrack.removeEventListener('cuechange', null)
		this.#vGlobal.currentTrack.addEventListener('cuechange', () => {
			let cues = this.#vGlobal.currentTrack.activeCues;

			if(!cues[0]) {
				this.#gContenaire.querySelector('.trackText').style.display = "none"
				return
			}

			let trackText = cues[0].text

			this.#gContenaire.querySelector('.trackText').innerHTML = '<div><span>'+trackText.replace("\n", '</div></span><div><span>')+"</div></span>"
			this.#gContenaire.querySelector('.trackText').style.display = "inline-block"
		})
	}

	#init_controlers() {

		this.playerHTML = `<div class="butterfly-player-controleurs">`

			this.playerHTML += `<div class="top">`
			this.playerHTML += `</div>`
			this.playerHTML += `<div class="bottom">`

				this.playerHTML += `<div class="left">`
					this.playerHTML += `<ul>`
						this.playerHTML += `<li><button class="icon" id="player_button_pause">${iconPlay}</button></li>`
						this.playerHTML += `<li>`
							this.playerHTML += `<button class="icon" id="player_button_muted">${iconMute}</button>`
							this.playerHTML += `<span class="volumechange-bar"><span class="volumechange-bar-content"></span></span>`
						this.playerHTML += `</li>`
					this.playerHTML += `</ul>`
				this.playerHTML += `</div>`

				this.playerHTML += `<div class="center">`
					this.playerHTML += `<div class="progress-bar-contenaire-relative">`
						this.playerHTML += `<span class="infobull-progressbar">`
							if(this.seek_file) {
								this.playerHTML += `<video src="${this.seek_file}" muted width="200px"></video>`
							}
							this.playerHTML += `<span class="timecode">00:00</span>`
						this.playerHTML += `</span>`

						this.playerHTML += `<div class="wf-display progress-bar">`
							this.playerHTML += `<span class="buffered"></span>`
							this.playerHTML += `<span class="readed"></span>`
						this.playerHTML += `</div>`
					this.playerHTML += `</div>`
				this.playerHTML += `</div>`

				this.playerHTML += `<div class="right">`
					this.playerHTML += `<ul>`
						this.playerHTML += `<li>`
							this.playerHTML += `<div class="info-video">`
								this.playerHTML += `<span id="videoCurrentTime">00:00</span>`
								this.playerHTML += `<span>/</span>`
								this.playerHTML += `<span id="videoDuration">00:00</span>`
							this.playerHTML += `</div>`
						this.playerHTML += `</li>`
						this.playerHTML += `<li><button class="icon setting-button-icon" id="setting-video-icon">${iconSetting}</button></li>`
						this.playerHTML += `<li><button class="icon" id="player_button_fullscreen">${iconFullscreen}</button></li>`
					this.playerHTML += `</ul>`
				this.playerHTML += `</div>`

			this.playerHTML += `</div>`

		this.playerHTML += `</div>`



		this.playerHTML += `<div class="option-video">`
			this.playerHTML += `<section class="option-player-video">`
				
				this.playerHTML += `<section class="option-player-video-translate">`

				this.playerHTML += `<section class="option-player-video-content left">`
					this.playerHTML += this.#vSettings.htmlQuality
					this.playerHTML += this.#vSettings.htmlAudio
					this.playerHTML += this.#vSettings.htmlSubtitle
					this.playerHTML += `<div class="option-button quality-changer">`
									+`<span class="current qulity-current" onClick="Kernel.setting_get('V${systeme_version} ${systeme_name} ${systeme_environement}', this.parentNode, 'focus', 'legal-notice')">`
										+`<span class="title">Information sur le player</span>`
									+`</span>`
							+`</div>`
				this.playerHTML += `</section>`
				this.playerHTML += `<section class="option-player-video-content right">`
					this.playerHTML += `<section class="setting-head">`
						this.playerHTML += `<div class="button-icon">${iconLess}</div>`
						this.playerHTML += `<span id="menu-title">Menu</span>`
					this.playerHTML += `</section>`
					this.playerHTML += this.#vSettings.htmlQualityButtons
					this.playerHTML += this.#vSettings.htmlAudioButtons
					this.playerHTML += this.#vSettings.htmlSubtitleButtons
					this.playerHTML += `<div class="setting-info" id="legal-notice">`
						this.playerHTML += `<p>Butterfly Player API</p>`
						this.playerHTML += `<p>- Kernel 1.03 - Lemon</p>`
						this.playerHTML += `<p>- V${systeme_version} ${systeme_name} ${systeme_environement}</p>`
						this.playerHTML += `<p>By 'heart_butterfly' - Floagg Entreprise EI</p>`
						this.playerHTML += systeme_changelogs
					this.playerHTML += `</div>`
				this.playerHTML += `</section>`

				this.playerHTML += `</section>`

			this.playerHTML += `</section>`
		this.playerHTML += `</div>`

		/* this.playerHTML += `<div class="trackText" style="font-size: ${this.#vGlobal.fontSizeSubtitle}px; line-height: ${this.#vGlobal.fontSizeSubtitle+5}px;"></div>`

		this.playerHTML += `<div class="menu-deroulant-for-player"  id="context-menu">`
			this.playerHTML += `<ul>`
				this.playerHTML += `<li><a onclick="Player.copy(Player.videoCurrentTime)"><span class="icon">${iconSetting}</span><span class="text">Copier 'currentTime'</span></a></li>`
				this.playerHTML += `<li><a onclick="Player.init_play()"><span class="icon">${iconPlay}</span><span class="text">Play/Pause</span></a></li>`
				this.playerHTML += `<li><a onclick="Player.init_mute()"><span class="icon">${iconUnMute}</span><span class="text">Mute/Unmute</span></a></li>`
				this.playerHTML += `<li><a onclick="Player.init_fullscreen()"><span class="icon">${iconFullscreen}</span><span class="text">Fullscreen</span></a></li>`
			this.playerHTML += `</ul>`
		this.playerHTML += `</div>` */
	}

	#init_subtitle() {
		this.#vSettings.currentSubtitle = "Off"

		this.#vSettings.htmlSubtitle = `<div class="option-button lang-changer">`
									+`<span class="current lang-current" onClick="Kernel.setting_get('Sous-titre', this.parentNode, 'focus', 'subtitle')">`
										+`<span class="title">Sous-titre</span>`
										+`<span class="generate-change" id="lang-current">Off</span>`
									+`</span>`
									+`</div>`

		let i = 0;
		this.#vSettings.htmlSubtitleButtons = '<ul class="setting-info" id="subtitle">'
		this.#vSettings.htmlSubtitleButtons += `<li class="button-change-font"><span class="icon-button button-hover" id="less-font-st">${iconLess}</span><span id="font-st">${this.#vGlobal.fontSizeSubtitle}</span><span class="icon-button button-hover" id="plus-font-st">${iconPlus}</span></li>`
		this.#vSettings.allSubtitle.forEach((e) => {
			this.#vGlobal.allSubtitleList_Track += `<track rossorigin="use-credentials" src="${e.url}" data-name="${e.name}" />`
			this.#vSettings.htmlSubtitleButtons += `<li class="button button-hover"><span class="button-change button-change-lang" data-id="${i}" data-name="${e.name}">${e.name}</span></li>`
			i++
		})
		this.#vSettings.htmlSubtitleButtons += `<li class="button button-hover"><span class="button-change button-change-lang" data-id="off">Off</span></li>`
		this.#vSettings.htmlSubtitleButtons += '</ul>'
	}

	#init_video() {
		this.#vGlobal.element = document.createElement('video');
		this.#vGlobal.element.id = 'video-player';
		this.#vGlobal.element.src = this.#vGlobal.src;
		this.#vGlobal.element.autoplay = this.#vGlobal.autoplay;
		this.#vGlobal.element.muted = this.#vGlobal.muted;
		this.#vGlobal.element.style.height = this.#vGlobal.height;
		this.#vGlobal.element.style.width = this.#vGlobal.width;
		this.#vGlobal.element.innerHTML = this.#vGlobal.allSubtitleList_Track

		this.#gContenaire.appendChild(this.#vGlobal.element);

		this.#vGlobal.thumbnail = document.createElement('img');
		this.#vGlobal.thumbnail.id = 'video-thumbnail';
		this.#vGlobal.thumbnail.src = this.#vGlobal.srcThumbnail;
		this.#vGlobal.thumbnail.style.height = '100%';
		this.#vGlobal.thumbnail.style.width = '100%';
		this.#gContenaire.appendChild(this.#vGlobal.thumbnail);

		this.#vGlobal.element = this.#gContenaire.querySelector('video#video-player')

		//this.#vControls.progressBarContenaire
		//this.#vControls.progressBarBuffered
		//this.#vControls.progressBarReaded


		this.#vControls.progressBarContenaire = this.#gContenaire.querySelector('.progress-bar')
		this.#vControls.progressBarReaded = this.#vControls.progressBarContenaire.querySelector('.progress-bar .readed')
		this.#vControls.progressBarBuffered = this.#vControls.progressBarContenaire.querySelector('.progress-bar .buffered')
		this.#vControls.infoBull = this.#gContenaire.querySelector('.infobull-progressbar')

		this.#vControls.volumeBarContenaire = this.#gContenaire.querySelector('.volumechange-bar')
		this.#vControls.volumeBarSlider = this.#gContenaire.querySelector('.volumechange-bar-content')

		/*
			this.#init_quality()
			this.#init_audio()
			this.#init_subtitle()
			this.#init_controlers()

			this.#gContenaire.innerHTML += this.playerHTML

			this.#watch_kernel()

			this.#vGlobal.element = this.#gContenaire.querySelector('video#'+this.#vGlobal.element.id)
			this.#vGlobal.element.innerHTML = this.#vGlobal.allSubtitleList_Track

			this.progressBar.contenaire = this.#gContenaire.querySelector('.progress-bar')
			this.progressBar.elementRead = this.progressBar.contenaire.querySelector('.progress-bar .readed')
			this.progressBar.elementBuffered = this.progressBar.contenaire.querySelector('.progress-bar .buffered')
			this.progressBar.elementBuffered = this.progressBar.contenaire.querySelector('.progress-bar .buffered')

			this.progressBar.playerInfobull = this.#gContenaire.querySelector('.infobull-progressbar')



			this.#vGlobal.volumeBarContenaire = this.#gContenaire.querySelector('.volumechange-bar')
			this.#vGlobal.volumeBarSlider = this.#gContenaire.querySelector('.volumechange-bar-content')

			this.#init_all_event() 
		*/
	}



	#init_quality() {

		if(this.#vSettings.currentQuality === '') {
			this.#vSettings.currentQuality = this.#vSettings.allQuality[0]
		}

		this.#vSettings.htmlQuality = `<div class="option-button quality-changer">`
									+`<span class="current qulity-current" onClick="Kernel.setting_get('Qualit√© vid√©o', this.parentNode, 'focus', 'quality')">`
										+`<span class="title">Qualit√©</span>`
										+`<span class="generate-change" id="quality-current">${this.#vSettings.currentQuality}</span>`
									+`</span>`
							+`</div>`

		let i = 0;
		this.#vSettings.htmlQualityButtons = '<ul class="setting-info" id="quality">'
		this.#vSettings.allQuality.forEach((e) => {
			this.#vSettings.htmlQualityButtons += `<li class="button-hover"><span class="button-change button-change-quality" data-quality-id="${e}">${e}</span></li>`
			i++
		})
		this.#vSettings.htmlQualityButtons += '</ul>'
	}



	#init_audio() {
		if(this.#vSettings.allAudio.length <= 0)
			return;

		if(this.#vSettings.currentAudio === '') {
			this.#vSettings.currentAudio = this.#vSettings.allAudio[0].name
			if(this.onAudioChange)
				this.onAudioChange(this.#vSettings.allAudio[0].init)
			else
				this.#vGlobal.src = this.#vSettings.allAudio[0].init
		}

		this.#vSettings.htmlAudio = `<div class="option-button audio-changer">`
									+`<span class="current audio-current" onClick="Kernel.setting_get('Audio de la vid√©o', this.parentNode, 'focus', 'audio')">`
										+`<span class="title">Audio</span>`
										+`<span class="generate-change" id="audio-current">${this.#vSettings.currentAudio}</span>`
									+`</span>`
							+`</div>`

		let i = 0;
		this.#vSettings.htmlAudioButtons = '<ul class="setting-info" id="audio">'
		this.#vSettings.allAudio.forEach((e) => {
			this.#vSettings.htmlAudioButtons += `<li class="button-hover"><span class="button-change button-change-audio" data-audio-init="${e.init}" data-audio-id="${e.id}">${e.name}</span></li>`
			i++
		})
		this.#vSettings.htmlAudioButtons += '</ul>'
	}

}